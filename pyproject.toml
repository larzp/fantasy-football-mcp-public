[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fantasy-football-mcp"
version = "1.0.0"
description = "Production-grade MCP server for Yahoo Fantasy Sports with sophisticated lineup optimization"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Fantasy Football MCP Contributors", email = "contributors@example.com"}
]
keywords = [
    "fantasy-football",
    "mcp",
    "yahoo-fantasy",
    "lineup-optimization",
    "sports-analytics"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Games/Entertainment"
]

dependencies = [
    "mcp>=1.2.0",
    "yfpy>=16.0.3",
    "pydantic>=2.10.4",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.1",
    "asyncio-pool>=0.6.0",
    "aiohttp>=3.11.11",
    "aiocache>=0.12.3",
    "pandas>=2.2.3",
    "numpy>=1.26.4",
    "loguru>=0.7.3",
    "click>=8.1.8",
    "rich>=13.9.6"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.2",
    "pytest-mock>=3.14.0",
    "pytest-cov>=6.0.0",
    "black>=24.10.0",
    "mypy>=1.14.1",
    "ruff>=0.9.1",
    "ipython>=8.18.0"
]

[project.scripts]
fantasy-football-mcp = "src.mcp_server:main"

[project.urls]
Homepage = "https://github.com/derekrbreese/fantasy-football-mcp-public"
Documentation = "https://github.com/derekrbreese/fantasy-football-mcp-public/wiki"
Repository = "https://github.com/derekrbreese/fantasy-football-mcp-public.git"
Issues = "https://github.com/derekrbreese/fantasy-football-mcp-public/issues"

[tool.setuptools]
packages = ["src"]

[tool.setuptools.package-data]
src = ["*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "silent"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):"
]